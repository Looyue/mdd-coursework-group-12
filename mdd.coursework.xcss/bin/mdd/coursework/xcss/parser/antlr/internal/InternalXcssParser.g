/*
 * generated by Xtext 2.24.0
 */
parser grammar InternalXcssParser;

options {
	tokenVocab=InternalXcssLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package mdd.coursework.xcss.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import mdd.coursework.xcss.services.XcssGrammarAccess;

}

@members {

 	private XcssGrammarAccess grammarAccess;

    public InternalXcssParser(TokenStream input, XcssGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "XcssModel";
   	}

   	@Override
   	protected XcssGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleXcssModel
entryRuleXcssModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXcssModelRule()); }
	iv_ruleXcssModel=ruleXcssModel
	{ $current=$iv_ruleXcssModel.current; }
	EOF;

// Rule XcssModel
ruleXcssModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getXcssModelAccess().getElementsAbstractElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleAbstractElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getXcssModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"mdd.coursework.xcss.Xcss.AbstractElement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	iv_ruleAbstractElement=ruleAbstractElement
	{ $current=$iv_ruleAbstractElement.current; }
	EOF;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getVariableDeclarationParserRuleCall_0());
		}
		this_VariableDeclaration_0=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getXCSSStyleRuleParserRuleCall_1());
		}
		this_XCSSStyleRule_1=ruleXCSSStyleRule
		{
			$current = $this_XCSSStyleRule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleXCSSStyleRule
entryRuleXCSSStyleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXCSSStyleRuleRule()); }
	iv_ruleXCSSStyleRule=ruleXCSSStyleRule
	{ $current=$iv_ruleXCSSStyleRule.current; }
	EOF;

// Rule XCSSStyleRule
ruleXCSSStyleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getXCSSStyleRuleAccess().getSelectorsXCSSSelectorParserRuleCall_0_0());
				}
				lv_selectors_0_0=ruleXCSSSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXCSSStyleRuleRule());
					}
					add(
						$current,
						"selectors",
						lv_selectors_0_0,
						"mdd.coursework.xcss.Xcss.XCSSSelector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=Comma
			{
				newLeafNode(otherlv_1, grammarAccess.getXCSSStyleRuleAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXCSSStyleRuleAccess().getSelectorsXCSSSelectorParserRuleCall_1_1_0());
					}
					lv_selectors_2_0=ruleXCSSSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXCSSStyleRuleRule());
						}
						add(
							$current,
							"selectors",
							lv_selectors_2_0,
							"mdd.coursework.xcss.Xcss.XCSSSelector");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		this_BEGIN_3=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_3, grammarAccess.getXCSSStyleRuleAccess().getBEGINTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXCSSStyleRuleAccess().getVariableDeclarationsVariableDeclarationParserRuleCall_3_0());
				}
				lv_variableDeclarations_4_0=ruleVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXCSSStyleRuleRule());
					}
					add(
						$current,
						"variableDeclarations",
						lv_variableDeclarations_4_0,
						"mdd.coursework.xcss.Xcss.VariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getXCSSStyleRuleAccess().getCssStyleDeclarationsCSSStyleDelacrationParserRuleCall_4_0());
				}
				lv_cssStyleDeclarations_5_0=ruleCSSStyleDelacration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXCSSStyleRuleRule());
					}
					add(
						$current,
						"cssStyleDeclarations",
						lv_cssStyleDeclarations_5_0,
						"mdd.coursework.xcss.Xcss.CSSStyleDelacration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_END_6=RULE_END
		{
			newLeafNode(this_END_6, grammarAccess.getXCSSStyleRuleAccess().getENDTerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getNameVariableIdParserRuleCall_0_0());
				}
				lv_name_0_0=ruleVariableId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"mdd.coursework.xcss.Xcss.VariableId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=EqualsSign
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getValueAdditionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"mdd.coursework.xcss.Xcss.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariableId
entryRuleVariableId returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVariableIdRule()); }
	iv_ruleVariableId=ruleVariableId
	{ $current=$iv_ruleVariableId.current.getText(); }
	EOF;

// Rule VariableId
ruleVariableId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=DollarSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariableIdAccess().getDollarSignKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getVariableIdAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1=PlusSign
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2=HyphenMinus
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"mdd.coursework.xcss.Xcss.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1=Asterisk
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2=Solidus
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"mdd.coursework.xcss.Xcss.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getCSSStyleValueParserRuleCall_0());
		}
		this_CSSStyleValue_0=ruleCSSStyleValue
		{
			$current = $this_CSSStyleValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1=LeftParenthesis
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_1_1());
			}
			this_Addition_2=ruleAddition
			{
				$current = $this_Addition_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=RightParenthesis
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleXCSSSelector
entryRuleXCSSSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXCSSSelectorRule()); }
	iv_ruleXCSSSelector=ruleXCSSSelector
	{ $current=$iv_ruleXCSSSelector.current; }
	EOF;

// Rule XCSSSelector
ruleXCSSSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getXCSSSelectorAccess().getNameSelectorNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleSelectorName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXCSSSelectorRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"mdd.coursework.xcss.Xcss.SelectorName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getXCSSSelectorAccess().getPseudoClassesPseudoClassParserRuleCall_1_0());
				}
				lv_pseudoClasses_1_0=rulePseudoClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXCSSSelectorRule());
					}
					add(
						$current,
						"pseudoClasses",
						lv_pseudoClasses_1_0,
						"mdd.coursework.xcss.Xcss.PseudoClass");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSelectorName
entryRuleSelectorName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorNameRule()); }
	iv_ruleSelectorName=ruleSelectorName
	{ $current=$iv_ruleSelectorName.current; }
	EOF;

// Rule SelectorName
ruleSelectorName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_dot_0_0=FullStop
					{
						newLeafNode(lv_dot_0_0, grammarAccess.getSelectorNameAccess().getDotFullStopKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectorNameRule());
						}
						setWithLastConsumed($current, "dot", lv_dot_0_0 != null, ".");
					}
				)
			)?
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getSelectorNameAccess().getNameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectorNameRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"mdd.coursework.xcss.Xcss.ID");
					}
				)
			)
		)
		    |
		(
			(
				lv_asterisk_2_0=Asterisk
				{
					newLeafNode(lv_asterisk_2_0, grammarAccess.getSelectorNameAccess().getAsteriskAsteriskKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectorNameRule());
					}
					setWithLastConsumed($current, "asterisk", lv_asterisk_2_0, "*");
				}
			)
		)
	)
;

// Entry rule entryRulePseudoClass
entryRulePseudoClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPseudoClassRule()); }
	iv_rulePseudoClass=rulePseudoClass
	{ $current=$iv_rulePseudoClass.current; }
	EOF;

// Rule PseudoClass
rulePseudoClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Colon
		{
			newLeafNode(otherlv_0, grammarAccess.getPseudoClassAccess().getColonKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_ID
				{
					newLeafNode(lv_value_1_0, grammarAccess.getPseudoClassAccess().getValueIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPseudoClassRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"mdd.coursework.xcss.Xcss.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleCSSStyleDelacration
entryRuleCSSStyleDelacration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCSSStyleDelacrationRule()); }
	iv_ruleCSSStyleDelacration=ruleCSSStyleDelacration
	{ $current=$iv_ruleCSSStyleDelacration.current; }
	EOF;

// Rule CSSStyleDelacration
ruleCSSStyleDelacration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCSSStyleDelacrationAccess().getCssStyleKeyCSSStyleKeyParserRuleCall_0_0());
				}
				lv_cssStyleKey_0_0=ruleCSSStyleKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCSSStyleDelacrationRule());
					}
					set(
						$current,
						"cssStyleKey",
						lv_cssStyleKey_0_0,
						"mdd.coursework.xcss.Xcss.CSSStyleKey");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=Colon
		{
			newLeafNode(otherlv_1, grammarAccess.getCSSStyleDelacrationAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCSSStyleDelacrationAccess().getCssStyleValueCSSStyleValueParserRuleCall_2_0());
				}
				lv_cssStyleValue_2_0=ruleCSSStyleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCSSStyleDelacrationRule());
					}
					set(
						$current,
						"cssStyleValue",
						lv_cssStyleValue_2_0,
						"mdd.coursework.xcss.Xcss.CSSStyleValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCSSStyleKey
entryRuleCSSStyleKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCSSStyleKeyRule()); }
	iv_ruleCSSStyleKey=ruleCSSStyleKey
	{ $current=$iv_ruleCSSStyleKey.current; }
	EOF;

// Rule CSSStyleKey
ruleCSSStyleKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_ID
			{
				newLeafNode(lv_value_0_0, grammarAccess.getCSSStyleKeyAccess().getValueIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getCSSStyleKeyRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"mdd.coursework.xcss.Xcss.ID");
			}
		)
	)
;

// Entry rule entryRuleCSSStyleValue
entryRuleCSSStyleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCSSStyleValueRule()); }
	iv_ruleCSSStyleValue=ruleCSSStyleValue
	{ $current=$iv_ruleCSSStyleValue.current; }
	EOF;

// Rule CSSStyleValue
ruleCSSStyleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCSSStyleValueAccess().getValueCSSStyleValueLiteralParserRuleCall_0_0());
				}
				lv_value_0_0=ruleCSSStyleValueLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCSSStyleValueRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"mdd.coursework.xcss.Xcss.CSSStyleValueLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCSSStyleValueRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getCSSStyleValueAccess().getVariableVariableDeclarationCrossReference_1_0());
				}
				ruleVariableId
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCSSStyleValueLiteral
entryRuleCSSStyleValueLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCSSStyleValueLiteralRule()); }
	iv_ruleCSSStyleValueLiteral=ruleCSSStyleValueLiteral
	{ $current=$iv_ruleCSSStyleValueLiteral.current; }
	EOF;

// Rule CSSStyleValueLiteral
ruleCSSStyleValueLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCSSStyleValueLiteralAccess().getNumberNumberLiteralParserRuleCall_0_0());
				}
				lv_number_0_0=ruleNumberLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCSSStyleValueLiteralRule());
					}
					set(
						$current,
						"number",
						lv_number_0_0,
						"mdd.coursework.xcss.Xcss.NumberLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getCSSStyleValueLiteralAccess().getSizeSizeLiteralParserRuleCall_1_0());
				}
				lv_size_1_0=ruleSizeLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCSSStyleValueLiteralRule());
					}
					set(
						$current,
						"size",
						lv_size_1_0,
						"mdd.coursework.xcss.Xcss.SizeLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_word_2_0=RULE_ID
				{
					newLeafNode(lv_word_2_0, grammarAccess.getCSSStyleValueLiteralAccess().getWordIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCSSStyleValueLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"word",
						lv_word_2_0,
						"mdd.coursework.xcss.Xcss.ID");
				}
			)
		)
		    |
		(
			(
				lv_hex_3_0=RULE_HEX
				{
					newLeafNode(lv_hex_3_0, grammarAccess.getCSSStyleValueLiteralAccess().getHexHEXTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCSSStyleValueLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"hex",
						lv_hex_3_0,
						"mdd.coursework.xcss.Xcss.HEX");
				}
			)
		)
		    |
		(
			(
				lv_function_4_0=RULE_FUNCTION_EXPRESSION
				{
					newLeafNode(lv_function_4_0, grammarAccess.getCSSStyleValueLiteralAccess().getFunctionFUNCTION_EXPRESSIONTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCSSStyleValueLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"function",
						lv_function_4_0,
						"mdd.coursework.xcss.Xcss.FUNCTION_EXPRESSION");
				}
			)
		)
		    |
		(
			(
				lv_string_5_0=RULE_STRING
				{
					newLeafNode(lv_string_5_0, grammarAccess.getCSSStyleValueLiteralAccess().getStringSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCSSStyleValueLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSizeLiteral
entryRuleSizeLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSizeLiteralRule()); }
	iv_ruleSizeLiteral=ruleSizeLiteral
	{ $current=$iv_ruleSizeLiteral.current; }
	EOF;

// Rule SizeLiteral
ruleSizeLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSizeLiteralAccess().getValueNUMBERParserRuleCall_0_0());
				}
				lv_value_0_0=ruleNUMBER
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSizeLiteralRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"mdd.coursework.xcss.Xcss.NUMBER");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_unit_1_0=RULE_ID
				{
					newLeafNode(lv_unit_1_0, grammarAccess.getSizeLiteralAccess().getUnitIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSizeLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"unit",
						lv_unit_1_0,
						"mdd.coursework.xcss.Xcss.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current; }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNumberLiteralAccess().getValueNUMBERParserRuleCall_0());
			}
			lv_value_0_0=ruleNUMBER
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNumberLiteralRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"mdd.coursework.xcss.Xcss.NUMBER");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleNUMBER
entryRuleNUMBER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNUMBERRule()); }
	iv_ruleNUMBER=ruleNUMBER
	{ $current=$iv_ruleNUMBER.current.getText(); }
	EOF;

// Rule NUMBER
ruleNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getNUMBERAccess().getFLOATParserRuleCall_1());
		}
		this_FLOAT_1=ruleFLOAT
		{
			$current.merge(this_FLOAT_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getFLOATRule()); }
	iv_ruleFLOAT=ruleFLOAT
	{ $current=$iv_ruleFLOAT.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule FLOAT
ruleFLOAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			kw=HyphenMinus
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFLOATAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_1());
			}
		)*
		kw=FullStop
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFLOATAccess().getFullStopKeyword_2());
		}
		(
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_3());
			}
		)+
	)
;
finally {
	myHiddenTokenState.restore();
}
