/*
 * generated by Xtext 2.24.0
 */
package mdd.coursework.xcss.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import mdd.coursework.xcss.xcss.XCSSStyleRule
import mdd.coursework.xcss.xcss.CSSStyleDelacration
import mdd.coursework.xcss.xcss.CSSStyleKey
import mdd.coursework.xcss.xcss.Addition
import mdd.coursework.xcss.xcss.Multiplication
import mdd.coursework.xcss.xcss.CSSStyleValueLiteral
import mdd.coursework.xcss.xcss.SizeLiteral
import mdd.coursework.xcss.xcss.XCSSSelector
import mdd.coursework.xcss.xcss.PseudoClass
import mdd.coursework.xcss.xcss.CSSStyleValue
import mdd.coursework.xcss.xcss.SelectorName
import mdd.coursework.xcss.xcss.NumberLiteral

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class XcssGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val xcssNameFragments = resource.URI.lastSegment.split("\\.")
		val fileName = xcssNameFragments.get(0) + ".css"
		val text = '''«resource.allContents.toIterable.filter(XCSSStyleRule).map[generate].join('\n')»'''
		fsa.generateFile(fileName, text)
	}
	
	dispatch def String generate(XCSSStyleRule sr) '''
		«IF sr.selectors.size > 0»
			«sr.selectors.get(0).generate»«IF sr.selectors.size > 1»«FOR index: (1..sr.selectors.size-1)», «sr.selectors.get(index).generate»«ENDFOR»«ENDIF» {
				«sr.cssStyleDeclarations.map[generate].join('\n')»
			}
		«ENDIF»'''
	
	dispatch def String generate(CSSStyleDelacration sd) '''
		«sd.cssStyleKey.generate»: «sd.cssStyleValue.generate»;'''
	
	dispatch def String generate(XCSSSelector selector) '''
		«selector.name.generate»«selector.pseudoClasses.map[generate].join('')»'''
		
	dispatch def String generate(SelectorName sn)'''
		«IF sn.name !== null»«IF sn.dot».«ENDIF»«sn.name»«ELSE»*«ENDIF»'''
	
	dispatch def String generate(PseudoClass pc) ''':«pc.value»'''
	
	dispatch def String generate(CSSStyleKey sk) '''«sk.value»'''
	
	dispatch def String generate(CSSStyleValue cv) '''
	«IF cv.value !== null»«cv.value.generate»«ELSEIF cv.variable !== null»«cv.variable.value.generate»«ENDIF»'''
	
	dispatch def String generate(CSSStyleValueLiteral svl) '''
		«IF svl.size !== null»«svl.size.generate»«ELSEIF svl.number !== null»«svl.number.generate»«ELSEIF svl.word !== null»«svl.word»«ELSEIF svl.hex !== null»«svl.hex»«ELSEIF svl.function !== null»«svl.function»«ELSEIF svl.string !== null»«svl.string»«ENDIF»'''
	
	dispatch def String generate(SizeLiteral sl) '''«sl.value»«sl.unit»'''
	
	dispatch def String generate(NumberLiteral nl) '''«nl.value»'''
	
	dispatch def String generate(Addition exp) {
		val left = exp.left.generate
		var unit = ""
		var float leftNumber = 0
		var float rightNumber = 0
		var float result = 0
		val operators = exp.operator.map[e | e]
		val rights = exp.right.map[e | e]
		
		if (left.replaceAll("[^(a-zA-Z)]","" ).length() > 0) {
			unit = left.replaceAll("[^(a-zA-Z)]","" );
			leftNumber = Float.parseFloat(left.replaceAll("[^((0-9).)]", ""));
		}
		
		for(var i = 0; i < operators.size; i++) {
			rightNumber = Float.parseFloat(rights.get(i).generate.replaceAll("[^((0-9).)]", ""))
			if (operators.get(i).equals("+")) {
				result = leftNumber + rightNumber
			} else {
				result = leftNumber - rightNumber
			}
		}
		
		return '''«result»«unit»'''
	}
	
	dispatch def String generate(Multiplication exp) {
		val left = exp.left.generate
		var unit = ""
		var float leftNumber = 0
		var float rightNumber = 0
		var float result = 0
		val operators = exp.operator.map[e | e]
		val rights = exp.right.map[e | e]
		
		if (left.replaceAll("[^(a-zA-Z)]","" ).length() > 0) {
			unit = left.replaceAll("[^(a-zA-Z)]","" );
		}
		leftNumber = Float.parseFloat(left.replaceAll("[^((0-9).)]", ""));
		
		for(var i = 0; i < operators.size; i++) {
			if (rights.get(i).generate.replaceAll("[^(a-zA-Z)]","" ).length() > 0) {
				unit = rights.get(i).generate.replaceAll("[^(a-zA-Z)]","" );
			}
			rightNumber = Float.parseFloat(rights.get(i).generate.replaceAll("[^((0-9).)]", ""))
			if (operators.get(i).equals("*")) {
				result = leftNumber * rightNumber
			} else {
				result = leftNumber / rightNumber
			}
		}
		
		return '''«result»«unit»'''
	}
}
