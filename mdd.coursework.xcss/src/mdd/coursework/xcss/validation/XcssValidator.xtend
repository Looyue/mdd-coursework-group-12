/*
 * generated by Xtext 2.24.0
 */
package mdd.coursework.xcss.validation;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;

import mdd.coursework.xcss.xcss.PseudoClass;
import mdd.coursework.xcss.xcss.SizeLiteral;
import mdd.coursework.xcss.xcss.VariableDeclaration;
import mdd.coursework.xcss.xcss.XcssModel;

import java.util.regex.Pattern;
import mdd.coursework.xcss.xcss.XcssPackage;
import mdd.coursework.xcss.xcss.CSSStyleDelacration
import mdd.coursework.xcss.xcss.CSSStyleKey
import mdd.coursework.xcss.xcss.XCSSStyleRule
import java.util.List
import java.util.ArrayList
import mdd.coursework.xcss.xcss.Addition
import mdd.coursework.xcss.xcss.Multiplication
import mdd.coursework.xcss.xcss.CSSStyleValue
import mdd.coursework.xcss.typing.validation.XCSSTypeSystemValidator

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class XcssValidator extends XCSSTypeSystemValidator {
	
	@Check
	def CheckUnitOfSizeLiteral(SizeLiteral sl) {
		if (!Pattern.matches('^[A-Za-z]+$', sl.unit)) {
			error('The name of size literal can only include numbers', XcssPackage.Literals.SIZE_LITERAL__UNIT)
		}
	}
	
	@Check
	def CheckPseudoClass(PseudoClass pc) {
		if (!Pattern.matches('([\\(]?[A-Za-z]+[\\)]?)+', pc.value)) {
			error('The pseudo class can only include letters and parentheses', XcssPackage.Literals.PSEUDO_CLASS__VALUE)
		}
	}
	
	@Check
	def CheckVariableNamesAreUnique(VariableDeclaration vd) {
		var String[] names
		if (vd.eContainer() instanceof XcssModel) {
			val elemets = (vd.eContainer as XcssModel).elements
			names = elemets.filter(VariableDeclaration).map[e | e.name]
		} else if (vd.eContainer instanceof XCSSStyleRule) {
			val variableDeclarations = (vd.eContainer as XCSSStyleRule).variableDeclarations
			names = variableDeclarations.filter(VariableDeclaration).map[e | e.name]
		}
		var equalNameCount = 0
		for (name: names) {
			if (name.equals(vd.name)) {
				equalNameCount = equalNameCount + 1
			}
		}
		if (equalNameCount > 1) {
			error('Duplicated variable name', XcssPackage.Literals.VARIABLE_DECLARATION__NAME)
		}
	}
	
	@Check
	def CheckCSSStyleKeysAreUniqueWhenEditing(CSSStyleKey ck) {
		val EList<CSSStyleDelacration> cssStyleDeclarations = ((ck.eContainer as CSSStyleDelacration).eContainer as XCSSStyleRule).cssStyleDeclarations
			val keys = cssStyleDeclarations.map[e | e.cssStyleKey].filter[e | e.value !== null].map[e | e.value]
			var equalKeyCount = 0
			for (key: keys) {
				if (key.equals(ck.value)) {
					equalKeyCount = equalKeyCount + 1
				}
			}
			if (equalKeyCount > 1) {
				error('Duplicated style key', XcssPackage.Literals.CSS_STYLE_KEY__VALUE)
			}
	}
	
	@Check
	def CheckVariablesAreUsed(VariableDeclaration vd) {
		val List<String> referenceNames = new ArrayList()
		if (vd.eContainer instanceof XcssModel) {
			val xcssModel = vd.eContainer as XcssModel
			val rules = xcssModel.elements.filter(XCSSStyleRule)
			val declarations = xcssModel.elements.filter(VariableDeclaration)
			for (declaration: declarations) {
				if (declaration.value instanceof Addition) {
					referenceNames.addAll(getReferenceNames(declaration.value as Addition))
				} else if (declaration.value instanceof Multiplication) {
					referenceNames.addAll(getReferenceNames(declaration.value as Multiplication))
				} else if (declaration.value instanceof CSSStyleValue) {
					referenceNames.addAll(getReferenceNames(declaration.value as CSSStyleValue))
				}
			}
			for (rule: rules) {
				rule.cssStyleDeclarations.filter[e | e.cssStyleValue.variable !== null].forall[e | referenceNames.add(e.cssStyleValue.variable.name)]
			}
		} else if (vd.eContainer instanceof XCSSStyleRule) {
			val xcssStyleRule = vd.eContainer as XCSSStyleRule
			xcssStyleRule.cssStyleDeclarations.filter[e | e.cssStyleValue.variable !== null].forall[e | referenceNames.add(e.cssStyleValue.variable.name)]
		}
		if (!referenceNames.contains(vd.name)) {
			warning(vd.name + ' is defined but never used', XcssPackage.Literals.VARIABLE_DECLARATION__NAME)
		}
	}
	
	def List<String> getReferenceNames(Addition addition) {
		val List<String> referenceNames = new ArrayList()
		val left = (addition as Addition).left
		val rights = (addition as Addition).right
		if (left instanceof Addition) {
			referenceNames.addAll(getReferenceNames(left as Addition))
		} else if (left instanceof Multiplication) {
			referenceNames.addAll(getReferenceNames(left as Multiplication))
		} else if (left instanceof CSSStyleValue) {
			referenceNames.addAll(getReferenceNames(left as CSSStyleValue))
		}
		rights.forall[right |
			if (right instanceof Addition) {
				referenceNames.addAll(getReferenceNames(right as Addition))
			} else if (right instanceof Multiplication) {
				referenceNames.addAll(getReferenceNames(right as Multiplication))
			} else if (right instanceof CSSStyleValue) {
				referenceNames.addAll(getReferenceNames(right as CSSStyleValue))
			}
		]
		referenceNames
	}
	
	def List<String> getReferenceNames(Multiplication mul) {
		val List<String> referenceNames = new ArrayList()
		val mulLeft = (mul as Multiplication).left
		val mulRights = (mul as Multiplication).right
		if (mulLeft instanceof Addition) {
			referenceNames.addAll(getReferenceNames(mulLeft as Addition))
		} else if (mulLeft instanceof Multiplication) {
			referenceNames.addAll(getReferenceNames(mulLeft as Multiplication))
		} else if (mulLeft instanceof CSSStyleValue) {
			referenceNames.addAll(getReferenceNames(mulLeft as CSSStyleValue))
		}
		mulRights.forall[mulRight |
			if (mulRight instanceof Addition) {
				referenceNames.addAll(getReferenceNames(mulRight as Addition))
			} else if (mulRight instanceof Multiplication) {
				referenceNames.addAll(getReferenceNames(mulRight as Multiplication))
			} else if (mulRight instanceof CSSStyleValue) {
				referenceNames.addAll(getReferenceNames(mulRight as CSSStyleValue))
			}
		]
		referenceNames
	}
	
	def List<String> getReferenceNames(CSSStyleValue cv) {
		val List<String> referenceNames = new ArrayList()
		if (cv.variable !== null) {
			referenceNames.add(cv.variable.name)
		}
		referenceNames
	}
}
