/**
 * generated by Xtext 2.24.0
 */
package mdd.coursework.xcss.generator;

import com.google.common.collect.Iterables;
import java.util.Arrays;
import java.util.List;
import mdd.coursework.xcss.xcss.Addition;
import mdd.coursework.xcss.xcss.CSSStyleDelacration;
import mdd.coursework.xcss.xcss.CSSStyleKey;
import mdd.coursework.xcss.xcss.CSSStyleValue;
import mdd.coursework.xcss.xcss.CSSStyleValueLiteral;
import mdd.coursework.xcss.xcss.Expression;
import mdd.coursework.xcss.xcss.Multiplication;
import mdd.coursework.xcss.xcss.NumberLiteral;
import mdd.coursework.xcss.xcss.PseudoClass;
import mdd.coursework.xcss.xcss.SelectorName;
import mdd.coursework.xcss.xcss.SizeLiteral;
import mdd.coursework.xcss.xcss.VariableDeclaration;
import mdd.coursework.xcss.xcss.XCSSSelector;
import mdd.coursework.xcss.xcss.XCSSStyleRule;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class XcssGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final String[] xcssNameFragments = resource.getURI().lastSegment().split("\\.");
    String _get = xcssNameFragments[0];
    final String fileName = (_get + ".css");
    StringConcatenation _builder = new StringConcatenation();
    final Function1<XCSSStyleRule, String> _function = (XCSSStyleRule it) -> {
      return this.generate(it);
    };
    String _join = IterableExtensions.join(IterableExtensions.<XCSSStyleRule, String>map(Iterables.<XCSSStyleRule>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), XCSSStyleRule.class), _function), "\n");
    _builder.append(_join);
    final String text = _builder.toString();
    fsa.generateFile(fileName, text);
  }
  
  protected String _generate(final XCSSStyleRule sr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _size = sr.getSelectors().size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        String _generate = this.generate(sr.getSelectors().get(0));
        _builder.append(_generate);
        {
          int _size_1 = sr.getSelectors().size();
          boolean _greaterThan_1 = (_size_1 > 1);
          if (_greaterThan_1) {
            {
              int _size_2 = sr.getSelectors().size();
              int _minus = (_size_2 - 1);
              IntegerRange _upTo = new IntegerRange(1, _minus);
              for(final Integer index : _upTo) {
                _builder.append(", ");
                String _generate_1 = this.generate(sr.getSelectors().get((index).intValue()));
                _builder.append(_generate_1);
              }
            }
          }
        }
        _builder.append(" {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        final Function1<CSSStyleDelacration, String> _function = (CSSStyleDelacration it) -> {
          return this.generate(it);
        };
        String _join = IterableExtensions.join(ListExtensions.<CSSStyleDelacration, String>map(sr.getCssStyleDeclarations(), _function), "\n");
        _builder.append(_join, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
      }
    }
    return _builder.toString();
  }
  
  protected String _generate(final CSSStyleDelacration sd) {
    StringConcatenation _builder = new StringConcatenation();
    String _generate = this.generate(sd.getCssStyleKey());
    _builder.append(_generate);
    _builder.append(": ");
    String _generate_1 = this.generate(sd.getCssStyleValue());
    _builder.append(_generate_1);
    _builder.append(";");
    return _builder.toString();
  }
  
  protected String _generate(final XCSSSelector selector) {
    StringConcatenation _builder = new StringConcatenation();
    String _generate = this.generate(selector.getName());
    _builder.append(_generate);
    final Function1<PseudoClass, String> _function = (PseudoClass it) -> {
      return this.generate(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<PseudoClass, String>map(selector.getPseudoClasses(), _function), "");
    _builder.append(_join);
    return _builder.toString();
  }
  
  protected String _generate(final SelectorName sn) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _name = sn.getName();
      boolean _tripleNotEquals = (_name != null);
      if (_tripleNotEquals) {
        {
          boolean _isDot = sn.isDot();
          if (_isDot) {
            _builder.append(".");
          }
        }
        String _name_1 = sn.getName();
        _builder.append(_name_1);
      } else {
        _builder.append("*");
      }
    }
    return _builder.toString();
  }
  
  protected String _generate(final PseudoClass pc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(":");
    String _value = pc.getValue();
    _builder.append(_value);
    return _builder.toString();
  }
  
  protected String _generate(final CSSStyleKey sk) {
    StringConcatenation _builder = new StringConcatenation();
    String _value = sk.getValue();
    _builder.append(_value);
    return _builder.toString();
  }
  
  protected String _generate(final CSSStyleValue cv) {
    StringConcatenation _builder = new StringConcatenation();
    {
      CSSStyleValueLiteral _value = cv.getValue();
      boolean _tripleNotEquals = (_value != null);
      if (_tripleNotEquals) {
        String _generate = this.generate(cv.getValue());
        _builder.append(_generate);
      } else {
        VariableDeclaration _variable = cv.getVariable();
        boolean _tripleNotEquals_1 = (_variable != null);
        if (_tripleNotEquals_1) {
          String _generate_1 = this.generate(cv.getVariable().getValue());
          _builder.append(_generate_1);
        }
      }
    }
    return _builder.toString();
  }
  
  protected String _generate(final CSSStyleValueLiteral svl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      SizeLiteral _size = svl.getSize();
      boolean _tripleNotEquals = (_size != null);
      if (_tripleNotEquals) {
        String _generate = this.generate(svl.getSize());
        _builder.append(_generate);
      } else {
        NumberLiteral _number = svl.getNumber();
        boolean _tripleNotEquals_1 = (_number != null);
        if (_tripleNotEquals_1) {
          String _generate_1 = this.generate(svl.getNumber());
          _builder.append(_generate_1);
        } else {
          String _word = svl.getWord();
          boolean _tripleNotEquals_2 = (_word != null);
          if (_tripleNotEquals_2) {
            String _word_1 = svl.getWord();
            _builder.append(_word_1);
          } else {
            String _hex = svl.getHex();
            boolean _tripleNotEquals_3 = (_hex != null);
            if (_tripleNotEquals_3) {
              String _hex_1 = svl.getHex();
              _builder.append(_hex_1);
            } else {
              String _function = svl.getFunction();
              boolean _tripleNotEquals_4 = (_function != null);
              if (_tripleNotEquals_4) {
                String _function_1 = svl.getFunction();
                _builder.append(_function_1);
              } else {
                String _string = svl.getString();
                boolean _tripleNotEquals_5 = (_string != null);
                if (_tripleNotEquals_5) {
                  String _string_1 = svl.getString();
                  _builder.append(_string_1);
                }
              }
            }
          }
        }
      }
    }
    return _builder.toString();
  }
  
  protected String _generate(final SizeLiteral sl) {
    StringConcatenation _builder = new StringConcatenation();
    String _value = sl.getValue();
    _builder.append(_value);
    String _unit = sl.getUnit();
    _builder.append(_unit);
    return _builder.toString();
  }
  
  protected String _generate(final NumberLiteral nl) {
    StringConcatenation _builder = new StringConcatenation();
    String _value = nl.getValue();
    _builder.append(_value);
    return _builder.toString();
  }
  
  protected String _generate(final Addition exp) {
    final String left = this.generate(exp.getLeft());
    String unit = "";
    float leftNumber = 0;
    float rightNumber = 0;
    float result = 0;
    final Function1<String, String> _function = (String e) -> {
      return e;
    };
    final List<String> operators = ListExtensions.<String, String>map(exp.getOperator(), _function);
    final Function1<Expression, Expression> _function_1 = (Expression e) -> {
      return e;
    };
    final List<Expression> rights = ListExtensions.<Expression, Expression>map(exp.getRight(), _function_1);
    int _length = left.replaceAll("[^(a-zA-Z)]", "").length();
    boolean _greaterThan = (_length > 0);
    if (_greaterThan) {
      unit = left.replaceAll("[^(a-zA-Z)]", "");
      leftNumber = Float.parseFloat(left.replaceAll("[^((0-9).)]", ""));
    }
    for (int i = 0; (i < operators.size()); i++) {
      {
        rightNumber = Float.parseFloat(this.generate(rights.get(i)).replaceAll("[^((0-9).)]", ""));
        boolean _equals = operators.get(i).equals("+");
        if (_equals) {
          result = (leftNumber + rightNumber);
        } else {
          result = (leftNumber - rightNumber);
        }
      }
    }
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(result);
    _builder.append(unit);
    return _builder.toString();
  }
  
  protected String _generate(final Multiplication exp) {
    final String left = this.generate(exp.getLeft());
    String unit = "";
    float leftNumber = 0;
    float rightNumber = 0;
    float result = 0;
    final Function1<String, String> _function = (String e) -> {
      return e;
    };
    final List<String> operators = ListExtensions.<String, String>map(exp.getOperator(), _function);
    final Function1<Expression, Expression> _function_1 = (Expression e) -> {
      return e;
    };
    final List<Expression> rights = ListExtensions.<Expression, Expression>map(exp.getRight(), _function_1);
    int _length = left.replaceAll("[^(a-zA-Z)]", "").length();
    boolean _greaterThan = (_length > 0);
    if (_greaterThan) {
      unit = left.replaceAll("[^(a-zA-Z)]", "");
    }
    leftNumber = Float.parseFloat(left.replaceAll("[^((0-9).)]", ""));
    for (int i = 0; (i < operators.size()); i++) {
      {
        int _length_1 = this.generate(rights.get(i)).replaceAll("[^(a-zA-Z)]", "").length();
        boolean _greaterThan_1 = (_length_1 > 0);
        if (_greaterThan_1) {
          unit = this.generate(rights.get(i)).replaceAll("[^(a-zA-Z)]", "");
        }
        rightNumber = Float.parseFloat(this.generate(rights.get(i)).replaceAll("[^((0-9).)]", ""));
        boolean _equals = operators.get(i).equals("*");
        if (_equals) {
          result = (leftNumber * rightNumber);
        } else {
          result = (leftNumber / rightNumber);
        }
      }
    }
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(result);
    _builder.append(unit);
    return _builder.toString();
  }
  
  public String generate(final EObject exp) {
    if (exp instanceof Addition) {
      return _generate((Addition)exp);
    } else if (exp instanceof CSSStyleValue) {
      return _generate((CSSStyleValue)exp);
    } else if (exp instanceof Multiplication) {
      return _generate((Multiplication)exp);
    } else if (exp instanceof XCSSStyleRule) {
      return _generate((XCSSStyleRule)exp);
    } else if (exp instanceof CSSStyleDelacration) {
      return _generate((CSSStyleDelacration)exp);
    } else if (exp instanceof CSSStyleKey) {
      return _generate((CSSStyleKey)exp);
    } else if (exp instanceof CSSStyleValueLiteral) {
      return _generate((CSSStyleValueLiteral)exp);
    } else if (exp instanceof NumberLiteral) {
      return _generate((NumberLiteral)exp);
    } else if (exp instanceof PseudoClass) {
      return _generate((PseudoClass)exp);
    } else if (exp instanceof SelectorName) {
      return _generate((SelectorName)exp);
    } else if (exp instanceof SizeLiteral) {
      return _generate((SizeLiteral)exp);
    } else if (exp instanceof XCSSSelector) {
      return _generate((XCSSSelector)exp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
}
