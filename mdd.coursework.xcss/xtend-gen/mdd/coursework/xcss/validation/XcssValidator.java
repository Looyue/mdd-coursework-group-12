/**
 * generated by Xtext 2.24.0
 */
package mdd.coursework.xcss.validation;

import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import mdd.coursework.xcss.typing.validation.XCSSTypeSystemValidator;
import mdd.coursework.xcss.xcss.AbstractElement;
import mdd.coursework.xcss.xcss.Addition;
import mdd.coursework.xcss.xcss.CSSStyleDelacration;
import mdd.coursework.xcss.xcss.CSSStyleKey;
import mdd.coursework.xcss.xcss.CSSStyleValue;
import mdd.coursework.xcss.xcss.Expression;
import mdd.coursework.xcss.xcss.Multiplication;
import mdd.coursework.xcss.xcss.PseudoClass;
import mdd.coursework.xcss.xcss.SizeLiteral;
import mdd.coursework.xcss.xcss.VariableDeclaration;
import mdd.coursework.xcss.xcss.XCSSStyleRule;
import mdd.coursework.xcss.xcss.XcssModel;
import mdd.coursework.xcss.xcss.XcssPackage;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class XcssValidator extends XCSSTypeSystemValidator {
  @Check
  public void CheckUnitOfSizeLiteral(final SizeLiteral sl) {
    boolean _matches = Pattern.matches("^[A-Za-z]+$", sl.getUnit());
    boolean _not = (!_matches);
    if (_not) {
      this.error("The name of size literal can only include numbers", XcssPackage.Literals.SIZE_LITERAL__UNIT);
    }
  }
  
  @Check
  public void CheckPseudoClass(final PseudoClass pc) {
    boolean _matches = Pattern.matches("([\\(]?[A-Za-z]+[\\)]?)+", pc.getValue());
    boolean _not = (!_matches);
    if (_not) {
      this.error("The pseudo class can only include letters and parentheses", XcssPackage.Literals.PSEUDO_CLASS__VALUE);
    }
  }
  
  @Check
  public void CheckVariableNamesAreUnique(final VariableDeclaration vd) {
    String[] names = null;
    EObject _eContainer = vd.eContainer();
    if ((_eContainer instanceof XcssModel)) {
      EObject _eContainer_1 = vd.eContainer();
      final EList<AbstractElement> elemets = ((XcssModel) _eContainer_1).getElements();
      final Function1<VariableDeclaration, String> _function = (VariableDeclaration e) -> {
        return e.getName();
      };
      names = ((String[])Conversions.unwrapArray(IterableExtensions.<VariableDeclaration, String>map(Iterables.<VariableDeclaration>filter(elemets, VariableDeclaration.class), _function), String.class));
    } else {
      EObject _eContainer_2 = vd.eContainer();
      if ((_eContainer_2 instanceof XCSSStyleRule)) {
        EObject _eContainer_3 = vd.eContainer();
        final EList<VariableDeclaration> variableDeclarations = ((XCSSStyleRule) _eContainer_3).getVariableDeclarations();
        final Function1<VariableDeclaration, String> _function_1 = (VariableDeclaration e) -> {
          return e.getName();
        };
        names = ((String[])Conversions.unwrapArray(IterableExtensions.<VariableDeclaration, String>map(Iterables.<VariableDeclaration>filter(variableDeclarations, VariableDeclaration.class), _function_1), String.class));
      }
    }
    int equalNameCount = 0;
    for (final String name : names) {
      boolean _equals = name.equals(vd.getName());
      if (_equals) {
        equalNameCount = (equalNameCount + 1);
      }
    }
    if ((equalNameCount > 1)) {
      this.error("Duplicated variable name", XcssPackage.Literals.VARIABLE_DECLARATION__NAME);
    }
  }
  
  @Check
  public void CheckCSSStyleKeysAreUniqueWhenEditing(final CSSStyleKey ck) {
    EObject _eContainer = ck.eContainer();
    EObject _eContainer_1 = ((CSSStyleDelacration) _eContainer).eContainer();
    final EList<CSSStyleDelacration> cssStyleDeclarations = ((XCSSStyleRule) _eContainer_1).getCssStyleDeclarations();
    final Function1<CSSStyleDelacration, CSSStyleKey> _function = (CSSStyleDelacration e) -> {
      return e.getCssStyleKey();
    };
    final Function1<CSSStyleKey, Boolean> _function_1 = (CSSStyleKey e) -> {
      String _value = e.getValue();
      return Boolean.valueOf((_value != null));
    };
    final Function1<CSSStyleKey, String> _function_2 = (CSSStyleKey e) -> {
      return e.getValue();
    };
    final Iterable<String> keys = IterableExtensions.<CSSStyleKey, String>map(IterableExtensions.<CSSStyleKey>filter(ListExtensions.<CSSStyleDelacration, CSSStyleKey>map(cssStyleDeclarations, _function), _function_1), _function_2);
    int equalKeyCount = 0;
    for (final String key : keys) {
      boolean _equals = key.equals(ck.getValue());
      if (_equals) {
        equalKeyCount = (equalKeyCount + 1);
      }
    }
    if ((equalKeyCount > 1)) {
      this.error("Duplicated style key", XcssPackage.Literals.CSS_STYLE_KEY__VALUE);
    }
  }
  
  @Check
  public void CheckVariablesAreUsed(final VariableDeclaration vd) {
    final List<String> referenceNames = new ArrayList<String>();
    EObject _eContainer = vd.eContainer();
    if ((_eContainer instanceof XcssModel)) {
      EObject _eContainer_1 = vd.eContainer();
      final XcssModel xcssModel = ((XcssModel) _eContainer_1);
      final Iterable<XCSSStyleRule> rules = Iterables.<XCSSStyleRule>filter(xcssModel.getElements(), XCSSStyleRule.class);
      final Iterable<VariableDeclaration> declarations = Iterables.<VariableDeclaration>filter(xcssModel.getElements(), VariableDeclaration.class);
      for (final VariableDeclaration declaration : declarations) {
        Expression _value = declaration.getValue();
        if ((_value instanceof Addition)) {
          Expression _value_1 = declaration.getValue();
          referenceNames.addAll(this.getReferenceNames(((Addition) _value_1)));
        } else {
          Expression _value_2 = declaration.getValue();
          if ((_value_2 instanceof Multiplication)) {
            Expression _value_3 = declaration.getValue();
            referenceNames.addAll(this.getReferenceNames(((Multiplication) _value_3)));
          } else {
            Expression _value_4 = declaration.getValue();
            if ((_value_4 instanceof CSSStyleValue)) {
              Expression _value_5 = declaration.getValue();
              referenceNames.addAll(this.getReferenceNames(((CSSStyleValue) _value_5)));
            }
          }
        }
      }
      for (final XCSSStyleRule rule : rules) {
        final Function1<CSSStyleDelacration, Boolean> _function = (CSSStyleDelacration e) -> {
          VariableDeclaration _variable = e.getCssStyleValue().getVariable();
          return Boolean.valueOf((_variable != null));
        };
        final Function1<CSSStyleDelacration, Boolean> _function_1 = (CSSStyleDelacration e) -> {
          return Boolean.valueOf(referenceNames.add(e.getCssStyleValue().getVariable().getName()));
        };
        IterableExtensions.<CSSStyleDelacration>forall(IterableExtensions.<CSSStyleDelacration>filter(rule.getCssStyleDeclarations(), _function), _function_1);
      }
    } else {
      EObject _eContainer_2 = vd.eContainer();
      if ((_eContainer_2 instanceof XCSSStyleRule)) {
        EObject _eContainer_3 = vd.eContainer();
        final XCSSStyleRule xcssStyleRule = ((XCSSStyleRule) _eContainer_3);
        final Function1<CSSStyleDelacration, Boolean> _function_2 = (CSSStyleDelacration e) -> {
          VariableDeclaration _variable = e.getCssStyleValue().getVariable();
          return Boolean.valueOf((_variable != null));
        };
        final Function1<CSSStyleDelacration, Boolean> _function_3 = (CSSStyleDelacration e) -> {
          return Boolean.valueOf(referenceNames.add(e.getCssStyleValue().getVariable().getName()));
        };
        IterableExtensions.<CSSStyleDelacration>forall(IterableExtensions.<CSSStyleDelacration>filter(xcssStyleRule.getCssStyleDeclarations(), _function_2), _function_3);
      }
    }
    boolean _contains = referenceNames.contains(vd.getName());
    boolean _not = (!_contains);
    if (_not) {
      String _name = vd.getName();
      String _plus = (_name + " is defined but never used");
      this.warning(_plus, XcssPackage.Literals.VARIABLE_DECLARATION__NAME);
    }
  }
  
  public List<String> getReferenceNames(final Addition addition) {
    List<String> _xblockexpression = null;
    {
      final List<String> referenceNames = new ArrayList<String>();
      final Expression left = ((Addition) addition).getLeft();
      final EList<Expression> rights = ((Addition) addition).getRight();
      if ((left instanceof Addition)) {
        referenceNames.addAll(this.getReferenceNames(((Addition) left)));
      } else {
        if ((left instanceof Multiplication)) {
          referenceNames.addAll(this.getReferenceNames(((Multiplication) left)));
        } else {
          if ((left instanceof CSSStyleValue)) {
            referenceNames.addAll(this.getReferenceNames(((CSSStyleValue) left)));
          }
        }
      }
      final Function1<Expression, Boolean> _function = (Expression right) -> {
        boolean _xifexpression = false;
        if ((right instanceof Addition)) {
          _xifexpression = referenceNames.addAll(this.getReferenceNames(((Addition) right)));
        } else {
          boolean _xifexpression_1 = false;
          if ((right instanceof Multiplication)) {
            _xifexpression_1 = referenceNames.addAll(this.getReferenceNames(((Multiplication) right)));
          } else {
            boolean _xifexpression_2 = false;
            if ((right instanceof CSSStyleValue)) {
              _xifexpression_2 = referenceNames.addAll(this.getReferenceNames(((CSSStyleValue) right)));
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _xifexpression = _xifexpression_1;
        }
        return Boolean.valueOf(_xifexpression);
      };
      IterableExtensions.<Expression>forall(rights, _function);
      _xblockexpression = referenceNames;
    }
    return _xblockexpression;
  }
  
  public List<String> getReferenceNames(final Multiplication mul) {
    List<String> _xblockexpression = null;
    {
      final List<String> referenceNames = new ArrayList<String>();
      final Expression mulLeft = ((Multiplication) mul).getLeft();
      final EList<Expression> mulRights = ((Multiplication) mul).getRight();
      if ((mulLeft instanceof Addition)) {
        referenceNames.addAll(this.getReferenceNames(((Addition) mulLeft)));
      } else {
        if ((mulLeft instanceof Multiplication)) {
          referenceNames.addAll(this.getReferenceNames(((Multiplication) mulLeft)));
        } else {
          if ((mulLeft instanceof CSSStyleValue)) {
            referenceNames.addAll(this.getReferenceNames(((CSSStyleValue) mulLeft)));
          }
        }
      }
      final Function1<Expression, Boolean> _function = (Expression mulRight) -> {
        boolean _xifexpression = false;
        if ((mulRight instanceof Addition)) {
          _xifexpression = referenceNames.addAll(this.getReferenceNames(((Addition) mulRight)));
        } else {
          boolean _xifexpression_1 = false;
          if ((mulRight instanceof Multiplication)) {
            _xifexpression_1 = referenceNames.addAll(this.getReferenceNames(((Multiplication) mulRight)));
          } else {
            boolean _xifexpression_2 = false;
            if ((mulRight instanceof CSSStyleValue)) {
              _xifexpression_2 = referenceNames.addAll(this.getReferenceNames(((CSSStyleValue) mulRight)));
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _xifexpression = _xifexpression_1;
        }
        return Boolean.valueOf(_xifexpression);
      };
      IterableExtensions.<Expression>forall(mulRights, _function);
      _xblockexpression = referenceNames;
    }
    return _xblockexpression;
  }
  
  public List<String> getReferenceNames(final CSSStyleValue cv) {
    List<String> _xblockexpression = null;
    {
      final List<String> referenceNames = new ArrayList<String>();
      VariableDeclaration _variable = cv.getVariable();
      boolean _tripleNotEquals = (_variable != null);
      if (_tripleNotEquals) {
        referenceNames.add(cv.getVariable().getName());
      }
      _xblockexpression = referenceNames;
    }
    return _xblockexpression;
  }
}
