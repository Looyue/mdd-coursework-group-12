/*
 * generated by Xtext 2.24.0
 */
package mdd.coursework.xcss.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XcssGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class XcssModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.XcssModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//XcssModel:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXCSSStyleRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//	VariableDeclaration | XCSSStyleRule;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDeclaration | XCSSStyleRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }
		
		//XCSSStyleRule
		public RuleCall getXCSSStyleRuleParserRuleCall_1() { return cXCSSStyleRuleParserRuleCall_1; }
	}
	public class XCSSStyleRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.XCSSStyleRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorsXCSSSelectorParserRuleCall_0_0 = (RuleCall)cSelectorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectorsXCSSSelectorParserRuleCall_1_1_0 = (RuleCall)cSelectorsAssignment_1_1.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cVariableDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableDeclarationsVariableDeclarationParserRuleCall_3_0 = (RuleCall)cVariableDeclarationsAssignment_3.eContents().get(0);
		private final Assignment cCssStyleDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCssStyleDeclarationsCSSStyleDelacrationParserRuleCall_4_0 = (RuleCall)cCssStyleDeclarationsAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//XCSSStyleRule:
		//	selectors+=XCSSSelector (',' selectors+=XCSSSelector)*
		//	BEGIN
		//	variableDeclarations+=VariableDeclaration*
		//	cssStyleDeclarations+=CSSStyleDelacration*
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//selectors+=XCSSSelector (',' selectors+=XCSSSelector)*
		//BEGIN
		//variableDeclarations+=VariableDeclaration*
		//cssStyleDeclarations+=CSSStyleDelacration*
		//END
		public Group getGroup() { return cGroup; }
		
		//selectors+=XCSSSelector
		public Assignment getSelectorsAssignment_0() { return cSelectorsAssignment_0; }
		
		//XCSSSelector
		public RuleCall getSelectorsXCSSSelectorParserRuleCall_0_0() { return cSelectorsXCSSSelectorParserRuleCall_0_0; }
		
		//(',' selectors+=XCSSSelector)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//selectors+=XCSSSelector
		public Assignment getSelectorsAssignment_1_1() { return cSelectorsAssignment_1_1; }
		
		//XCSSSelector
		public RuleCall getSelectorsXCSSSelectorParserRuleCall_1_1_0() { return cSelectorsXCSSSelectorParserRuleCall_1_1_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//variableDeclarations+=VariableDeclaration*
		public Assignment getVariableDeclarationsAssignment_3() { return cVariableDeclarationsAssignment_3; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationsVariableDeclarationParserRuleCall_3_0() { return cVariableDeclarationsVariableDeclarationParserRuleCall_3_0; }
		
		//cssStyleDeclarations+=CSSStyleDelacration*
		public Assignment getCssStyleDeclarationsAssignment_4() { return cCssStyleDeclarationsAssignment_4; }
		
		//CSSStyleDelacration
		public RuleCall getCssStyleDeclarationsCSSStyleDelacrationParserRuleCall_4_0() { return cCssStyleDeclarationsCSSStyleDelacrationParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameVariableIdParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAdditionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// variable declaration
		//VariableDeclaration:
		//	name=VariableId '=' value=Addition;
		@Override public ParserRule getRule() { return rule; }
		
		//name=VariableId '=' value=Addition
		public Group getGroup() { return cGroup; }
		
		//name=VariableId
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//VariableId
		public RuleCall getNameVariableIdParserRuleCall_0_0() { return cNameVariableIdParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Addition
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Addition
		public RuleCall getValueAdditionParserRuleCall_2_0() { return cValueAdditionParserRuleCall_2_0; }
	}
	public class VariableIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.VariableId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//VariableId:
		//	'$' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'$' ID
		public Group getGroup() { return cGroup; }
		
		//'$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// calculation
		//Addition Expression:
		//	Multiplication ({Addition.left=current} operator+=('+' | '-') right+=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left=current} operator+=('+' | '-') right+=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left=current} operator+=('+' | '-') right+=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//operator+=('+' | '-')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right+=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication Expression:
		//	Primary ({Multiplication.left=current} operator+=('*' | '/') right+=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Multiplication.left=current} operator+=('*' | '/') right+=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Multiplication.left=current} operator+=('*' | '/') right+=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//operator+=('*' | '/')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//right+=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCSSStyleValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary Expression:
		//	CSSStyleValue | '(' Addition ')';
		@Override public ParserRule getRule() { return rule; }
		
		//CSSStyleValue | '(' Addition ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CSSStyleValue
		public RuleCall getCSSStyleValueParserRuleCall_0() { return cCSSStyleValueParserRuleCall_0; }
		
		//'(' Addition ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_1_1() { return cAdditionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class XCSSSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.XCSSSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSelectorNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPseudoClassesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPseudoClassesPseudoClassParserRuleCall_1_0 = (RuleCall)cPseudoClassesAssignment_1.eContents().get(0);
		
		//// CSS selector
		//XCSSSelector:
		//	name=SelectorName pseudoClasses+=PseudoClass*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SelectorName pseudoClasses+=PseudoClass*
		public Group getGroup() { return cGroup; }
		
		//name=SelectorName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//SelectorName
		public RuleCall getNameSelectorNameParserRuleCall_0_0() { return cNameSelectorNameParserRuleCall_0_0; }
		
		//pseudoClasses+=PseudoClass*
		public Assignment getPseudoClassesAssignment_1() { return cPseudoClassesAssignment_1; }
		
		//PseudoClass
		public RuleCall getPseudoClassesPseudoClassParserRuleCall_1_0() { return cPseudoClassesPseudoClassParserRuleCall_1_0; }
	}
	public class SelectorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.SelectorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDotAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0_0 = (Keyword)cDotAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cAsteriskAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_1_0 = (Keyword)cAsteriskAssignment_1.eContents().get(0);
		
		//SelectorName:
		//	dot?='.'? name=ID | asterisk='*';
		@Override public ParserRule getRule() { return rule; }
		
		//dot?='.'? name=ID | asterisk='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//dot?='.'? name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//dot?='.'?
		public Assignment getDotAssignment_0_0() { return cDotAssignment_0_0; }
		
		//'.'
		public Keyword getDotFullStopKeyword_0_0_0() { return cDotFullStopKeyword_0_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//asterisk='*'
		public Assignment getAsteriskAssignment_1() { return cAsteriskAssignment_1; }
		
		//'*'
		public Keyword getAsteriskAsteriskKeyword_1_0() { return cAsteriskAsteriskKeyword_1_0; }
	}
	public class PseudoClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.PseudoClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//PseudoClass:
		//	':' value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//':' value=ID
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
	}
	public class CSSStyleDelacrationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.CSSStyleDelacration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCssStyleKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCssStyleKeyCSSStyleKeyParserRuleCall_0_0 = (RuleCall)cCssStyleKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCssStyleValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCssStyleValueCSSStyleValueParserRuleCall_2_0 = (RuleCall)cCssStyleValueAssignment_2.eContents().get(0);
		
		//// CSS style declaration
		//CSSStyleDelacration:
		//	cssStyleKey=CSSStyleKey ':' cssStyleValue=CSSStyleValue;
		@Override public ParserRule getRule() { return rule; }
		
		//cssStyleKey=CSSStyleKey ':' cssStyleValue=CSSStyleValue
		public Group getGroup() { return cGroup; }
		
		//cssStyleKey=CSSStyleKey
		public Assignment getCssStyleKeyAssignment_0() { return cCssStyleKeyAssignment_0; }
		
		//CSSStyleKey
		public RuleCall getCssStyleKeyCSSStyleKeyParserRuleCall_0_0() { return cCssStyleKeyCSSStyleKeyParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//cssStyleValue=CSSStyleValue
		public Assignment getCssStyleValueAssignment_2() { return cCssStyleValueAssignment_2; }
		
		//CSSStyleValue
		public RuleCall getCssStyleValueCSSStyleValueParserRuleCall_2_0() { return cCssStyleValueCSSStyleValueParserRuleCall_2_0; }
	}
	public class CSSStyleKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.CSSStyleKey");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//CSSStyleKey:
		//	value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}
	public class CSSStyleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.CSSStyleValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueCSSStyleValueLiteralParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cVariableVariableDeclarationCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationVariableIdParserRuleCall_1_0_1 = (RuleCall)cVariableVariableDeclarationCrossReference_1_0.eContents().get(1);
		
		//CSSStyleValue:
		//	value=CSSStyleValueLiteral | variable=[VariableDeclaration|VariableId];
		@Override public ParserRule getRule() { return rule; }
		
		//value=CSSStyleValueLiteral | variable=[VariableDeclaration|VariableId]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=CSSStyleValueLiteral
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//CSSStyleValueLiteral
		public RuleCall getValueCSSStyleValueLiteralParserRuleCall_0_0() { return cValueCSSStyleValueLiteralParserRuleCall_0_0; }
		
		//variable=[VariableDeclaration|VariableId]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[VariableDeclaration|VariableId]
		public CrossReference getVariableVariableDeclarationCrossReference_1_0() { return cVariableVariableDeclarationCrossReference_1_0; }
		
		//VariableId
		public RuleCall getVariableVariableDeclarationVariableIdParserRuleCall_1_0_1() { return cVariableVariableDeclarationVariableIdParserRuleCall_1_0_1; }
	}
	public class CSSStyleValueLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.CSSStyleValueLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberLiteralParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSizeSizeLiteralParserRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Assignment cWordAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cWordIDTerminalRuleCall_2_0 = (RuleCall)cWordAssignment_2.eContents().get(0);
		private final Assignment cHexAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cHexHEXTerminalRuleCall_3_0 = (RuleCall)cHexAssignment_3.eContents().get(0);
		private final Assignment cFunctionAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cFunctionFUNCTION_EXPRESSIONTerminalRuleCall_4_0 = (RuleCall)cFunctionAssignment_4.eContents().get(0);
		private final Assignment cStringAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cStringSTRINGTerminalRuleCall_5_0 = (RuleCall)cStringAssignment_5.eContents().get(0);
		
		//CSSStyleValueLiteral:
		//	number=NumberLiteral | size=SizeLiteral | word=ID | hex=HEX | function=FUNCTION_EXPRESSION | string=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//number=NumberLiteral | size=SizeLiteral | word=ID | hex=HEX | function=FUNCTION_EXPRESSION | string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=NumberLiteral
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//NumberLiteral
		public RuleCall getNumberNumberLiteralParserRuleCall_0_0() { return cNumberNumberLiteralParserRuleCall_0_0; }
		
		//size=SizeLiteral
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }
		
		//SizeLiteral
		public RuleCall getSizeSizeLiteralParserRuleCall_1_0() { return cSizeSizeLiteralParserRuleCall_1_0; }
		
		//word=ID
		public Assignment getWordAssignment_2() { return cWordAssignment_2; }
		
		//ID
		public RuleCall getWordIDTerminalRuleCall_2_0() { return cWordIDTerminalRuleCall_2_0; }
		
		//hex=HEX
		public Assignment getHexAssignment_3() { return cHexAssignment_3; }
		
		//HEX
		public RuleCall getHexHEXTerminalRuleCall_3_0() { return cHexHEXTerminalRuleCall_3_0; }
		
		//function=FUNCTION_EXPRESSION
		public Assignment getFunctionAssignment_4() { return cFunctionAssignment_4; }
		
		//FUNCTION_EXPRESSION
		public RuleCall getFunctionFUNCTION_EXPRESSIONTerminalRuleCall_4_0() { return cFunctionFUNCTION_EXPRESSIONTerminalRuleCall_4_0; }
		
		//string=STRING
		public Assignment getStringAssignment_5() { return cStringAssignment_5; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_5_0() { return cStringSTRINGTerminalRuleCall_5_0; }
	}
	public class SizeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.SizeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueNUMBERParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitIDTerminalRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//SizeLiteral:
		//	value=NUMBER unit=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NUMBER unit=ID
		public Group getGroup() { return cGroup; }
		
		//value=NUMBER
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_0_0() { return cValueNUMBERParserRuleCall_0_0; }
		
		//unit=ID
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//ID
		public RuleCall getUnitIDTerminalRuleCall_1_0() { return cUnitIDTerminalRuleCall_1_0; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//	value=NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NUMBER
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_0() { return cValueNUMBERParserRuleCall_0; }
	}
	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.NUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NUMBER:
		//	INT | FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_1() { return cFLOATParserRuleCall_1; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//FLOAT ecore::EFloat hidden():
		//	'-'? INT* '.' INT+;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT* '.' INT+
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT+
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}
	
	
	private final XcssModelElements pXcssModel;
	private final AbstractElementElements pAbstractElement;
	private final XCSSStyleRuleElements pXCSSStyleRule;
	private final VariableDeclarationElements pVariableDeclaration;
	private final VariableIdElements pVariableId;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	private final XCSSSelectorElements pXCSSSelector;
	private final SelectorNameElements pSelectorName;
	private final PseudoClassElements pPseudoClass;
	private final CSSStyleDelacrationElements pCSSStyleDelacration;
	private final CSSStyleKeyElements pCSSStyleKey;
	private final CSSStyleValueElements pCSSStyleValue;
	private final CSSStyleValueLiteralElements pCSSStyleValueLiteral;
	private final SizeLiteralElements pSizeLiteral;
	private final NumberLiteralElements pNumberLiteral;
	private final NUMBERElements pNUMBER;
	private final FLOATElements pFLOAT;
	private final TerminalRule tID;
	private final TerminalRule tHEX;
	private final TerminalRule tFUNCTION_EXPRESSION;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XcssGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pXcssModel = new XcssModelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pXCSSStyleRule = new XCSSStyleRuleElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pVariableId = new VariableIdElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
		this.pXCSSSelector = new XCSSSelectorElements();
		this.pSelectorName = new SelectorNameElements();
		this.pPseudoClass = new PseudoClassElements();
		this.pCSSStyleDelacration = new CSSStyleDelacrationElements();
		this.pCSSStyleKey = new CSSStyleKeyElements();
		this.pCSSStyleValue = new CSSStyleValueElements();
		this.pCSSStyleValueLiteral = new CSSStyleValueLiteralElements();
		this.pSizeLiteral = new SizeLiteralElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pNUMBER = new NUMBERElements();
		this.pFLOAT = new FLOATElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.ID");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.HEX");
		this.tFUNCTION_EXPRESSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.FUNCTION_EXPRESSION");
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mdd.coursework.xcss.Xcss.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mdd.coursework.xcss.Xcss".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//XcssModel:
	//	elements+=AbstractElement*;
	public XcssModelElements getXcssModelAccess() {
		return pXcssModel;
	}
	
	public ParserRule getXcssModelRule() {
		return getXcssModelAccess().getRule();
	}
	
	//AbstractElement:
	//	VariableDeclaration | XCSSStyleRule;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//XCSSStyleRule:
	//	selectors+=XCSSSelector (',' selectors+=XCSSSelector)*
	//	BEGIN
	//	variableDeclarations+=VariableDeclaration*
	//	cssStyleDeclarations+=CSSStyleDelacration*
	//	END;
	public XCSSStyleRuleElements getXCSSStyleRuleAccess() {
		return pXCSSStyleRule;
	}
	
	public ParserRule getXCSSStyleRuleRule() {
		return getXCSSStyleRuleAccess().getRule();
	}
	
	//// variable declaration
	//VariableDeclaration:
	//	name=VariableId '=' value=Addition;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableId:
	//	'$' ID;
	public VariableIdElements getVariableIdAccess() {
		return pVariableId;
	}
	
	public ParserRule getVariableIdRule() {
		return getVariableIdAccess().getRule();
	}
	
	//// calculation
	//Addition Expression:
	//	Multiplication ({Addition.left=current} operator+=('+' | '-') right+=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication Expression:
	//	Primary ({Multiplication.left=current} operator+=('*' | '/') right+=Primary)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Primary Expression:
	//	CSSStyleValue | '(' Addition ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//// CSS selector
	//XCSSSelector:
	//	name=SelectorName pseudoClasses+=PseudoClass*;
	public XCSSSelectorElements getXCSSSelectorAccess() {
		return pXCSSSelector;
	}
	
	public ParserRule getXCSSSelectorRule() {
		return getXCSSSelectorAccess().getRule();
	}
	
	//SelectorName:
	//	dot?='.'? name=ID | asterisk='*';
	public SelectorNameElements getSelectorNameAccess() {
		return pSelectorName;
	}
	
	public ParserRule getSelectorNameRule() {
		return getSelectorNameAccess().getRule();
	}
	
	//PseudoClass:
	//	':' value=ID;
	public PseudoClassElements getPseudoClassAccess() {
		return pPseudoClass;
	}
	
	public ParserRule getPseudoClassRule() {
		return getPseudoClassAccess().getRule();
	}
	
	//// CSS style declaration
	//CSSStyleDelacration:
	//	cssStyleKey=CSSStyleKey ':' cssStyleValue=CSSStyleValue;
	public CSSStyleDelacrationElements getCSSStyleDelacrationAccess() {
		return pCSSStyleDelacration;
	}
	
	public ParserRule getCSSStyleDelacrationRule() {
		return getCSSStyleDelacrationAccess().getRule();
	}
	
	//CSSStyleKey:
	//	value=ID;
	public CSSStyleKeyElements getCSSStyleKeyAccess() {
		return pCSSStyleKey;
	}
	
	public ParserRule getCSSStyleKeyRule() {
		return getCSSStyleKeyAccess().getRule();
	}
	
	//CSSStyleValue:
	//	value=CSSStyleValueLiteral | variable=[VariableDeclaration|VariableId];
	public CSSStyleValueElements getCSSStyleValueAccess() {
		return pCSSStyleValue;
	}
	
	public ParserRule getCSSStyleValueRule() {
		return getCSSStyleValueAccess().getRule();
	}
	
	//CSSStyleValueLiteral:
	//	number=NumberLiteral | size=SizeLiteral | word=ID | hex=HEX | function=FUNCTION_EXPRESSION | string=STRING;
	public CSSStyleValueLiteralElements getCSSStyleValueLiteralAccess() {
		return pCSSStyleValueLiteral;
	}
	
	public ParserRule getCSSStyleValueLiteralRule() {
		return getCSSStyleValueLiteralAccess().getRule();
	}
	
	//SizeLiteral:
	//	value=NUMBER unit=ID;
	public SizeLiteralElements getSizeLiteralAccess() {
		return pSizeLiteral;
	}
	
	public ParserRule getSizeLiteralRule() {
		return getSizeLiteralAccess().getRule();
	}
	
	//NumberLiteral:
	//	value=NUMBER;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//NUMBER:
	//	INT | FLOAT;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//FLOAT ecore::EFloat hidden():
	//	'-'? INT* '.' INT+;
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '-')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal HEX:
	//	'#' ('a'..'f' | 'A'..'F' | '0'..'9')*;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal FUNCTION_EXPRESSION:
	//	(('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '-')* '(')->')';
	public TerminalRule getFUNCTION_EXPRESSIONRule() {
		return tFUNCTION_EXPRESSION;
	}
	
	//terminal BEGIN:
	//	'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//	'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
