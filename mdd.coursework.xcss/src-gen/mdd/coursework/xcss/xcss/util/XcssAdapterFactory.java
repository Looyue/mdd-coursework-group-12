/**
 * generated by Xtext 2.24.0
 */
package mdd.coursework.xcss.xcss.util;

import mdd.coursework.xcss.xcss.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see mdd.coursework.xcss.xcss.XcssPackage
 * @generated
 */
public class XcssAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static XcssPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XcssAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = XcssPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XcssSwitch<Adapter> modelSwitch =
    new XcssSwitch<Adapter>()
    {
      @Override
      public Adapter caseXcssModel(XcssModel object)
      {
        return createXcssModelAdapter();
      }
      @Override
      public Adapter caseAbstractElement(AbstractElement object)
      {
        return createAbstractElementAdapter();
      }
      @Override
      public Adapter caseXCSSStyleRule(XCSSStyleRule object)
      {
        return createXCSSStyleRuleAdapter();
      }
      @Override
      public Adapter caseVariableDeclaration(VariableDeclaration object)
      {
        return createVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseXCSSSelector(XCSSSelector object)
      {
        return createXCSSSelectorAdapter();
      }
      @Override
      public Adapter caseSelectorName(SelectorName object)
      {
        return createSelectorNameAdapter();
      }
      @Override
      public Adapter casePseudoClass(PseudoClass object)
      {
        return createPseudoClassAdapter();
      }
      @Override
      public Adapter caseCSSStyleDelacration(CSSStyleDelacration object)
      {
        return createCSSStyleDelacrationAdapter();
      }
      @Override
      public Adapter caseCSSStyleKey(CSSStyleKey object)
      {
        return createCSSStyleKeyAdapter();
      }
      @Override
      public Adapter caseCSSStyleValue(CSSStyleValue object)
      {
        return createCSSStyleValueAdapter();
      }
      @Override
      public Adapter caseCSSStyleValueLiteral(CSSStyleValueLiteral object)
      {
        return createCSSStyleValueLiteralAdapter();
      }
      @Override
      public Adapter caseSizeLiteral(SizeLiteral object)
      {
        return createSizeLiteralAdapter();
      }
      @Override
      public Adapter caseNumberLiteral(NumberLiteral object)
      {
        return createNumberLiteralAdapter();
      }
      @Override
      public Adapter caseAddition(Addition object)
      {
        return createAdditionAdapter();
      }
      @Override
      public Adapter caseMultiplication(Multiplication object)
      {
        return createMultiplicationAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.XcssModel <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.XcssModel
   * @generated
   */
  public Adapter createXcssModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.AbstractElement <em>Abstract Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.AbstractElement
   * @generated
   */
  public Adapter createAbstractElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.XCSSStyleRule <em>XCSS Style Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.XCSSStyleRule
   * @generated
   */
  public Adapter createXCSSStyleRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.VariableDeclaration <em>Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.VariableDeclaration
   * @generated
   */
  public Adapter createVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.XCSSSelector <em>XCSS Selector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.XCSSSelector
   * @generated
   */
  public Adapter createXCSSSelectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.SelectorName <em>Selector Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.SelectorName
   * @generated
   */
  public Adapter createSelectorNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.PseudoClass <em>Pseudo Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.PseudoClass
   * @generated
   */
  public Adapter createPseudoClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.CSSStyleDelacration <em>CSS Style Delacration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.CSSStyleDelacration
   * @generated
   */
  public Adapter createCSSStyleDelacrationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.CSSStyleKey <em>CSS Style Key</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.CSSStyleKey
   * @generated
   */
  public Adapter createCSSStyleKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.CSSStyleValue <em>CSS Style Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.CSSStyleValue
   * @generated
   */
  public Adapter createCSSStyleValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.CSSStyleValueLiteral <em>CSS Style Value Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.CSSStyleValueLiteral
   * @generated
   */
  public Adapter createCSSStyleValueLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.SizeLiteral <em>Size Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.SizeLiteral
   * @generated
   */
  public Adapter createSizeLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.NumberLiteral <em>Number Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.NumberLiteral
   * @generated
   */
  public Adapter createNumberLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.Addition <em>Addition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.Addition
   * @generated
   */
  public Adapter createAdditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mdd.coursework.xcss.xcss.Multiplication <em>Multiplication</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mdd.coursework.xcss.xcss.Multiplication
   * @generated
   */
  public Adapter createMultiplicationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //XcssAdapterFactory
