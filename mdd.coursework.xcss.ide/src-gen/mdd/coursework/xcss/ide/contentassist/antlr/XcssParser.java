/*
 * generated by Xtext 2.24.0
 */
package mdd.coursework.xcss.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import mdd.coursework.xcss.ide.contentassist.antlr.internal.InternalXcssParser;
import mdd.coursework.xcss.services.XcssGrammarAccess;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class XcssParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(XcssGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, XcssGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0(), "rule__Addition__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0(), "rule__Multiplication__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getSelectorNameAccess().getAlternatives(), "rule__SelectorName__Alternatives");
			builder.put(grammarAccess.getCSSStyleValueAccess().getAlternatives(), "rule__CSSStyleValue__Alternatives");
			builder.put(grammarAccess.getCSSStyleValueLiteralAccess().getAlternatives(), "rule__CSSStyleValueLiteral__Alternatives");
			builder.put(grammarAccess.getNUMBERAccess().getAlternatives(), "rule__NUMBER__Alternatives");
			builder.put(grammarAccess.getXCSSStyleRuleAccess().getGroup(), "rule__XCSSStyleRule__Group__0");
			builder.put(grammarAccess.getXCSSStyleRuleAccess().getGroup_1(), "rule__XCSSStyleRule__Group_1__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
			builder.put(grammarAccess.getVariableIdAccess().getGroup(), "rule__VariableId__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getXCSSSelectorAccess().getGroup(), "rule__XCSSSelector__Group__0");
			builder.put(grammarAccess.getSelectorNameAccess().getGroup_0(), "rule__SelectorName__Group_0__0");
			builder.put(grammarAccess.getPseudoClassAccess().getGroup(), "rule__PseudoClass__Group__0");
			builder.put(grammarAccess.getCSSStyleDelacrationAccess().getGroup(), "rule__CSSStyleDelacration__Group__0");
			builder.put(grammarAccess.getSizeLiteralAccess().getGroup(), "rule__SizeLiteral__Group__0");
			builder.put(grammarAccess.getFLOATAccess().getGroup(), "rule__FLOAT__Group__0");
			builder.put(grammarAccess.getXcssModelAccess().getElementsAssignment(), "rule__XcssModel__ElementsAssignment");
			builder.put(grammarAccess.getXCSSStyleRuleAccess().getSelectorsAssignment_0(), "rule__XCSSStyleRule__SelectorsAssignment_0");
			builder.put(grammarAccess.getXCSSStyleRuleAccess().getSelectorsAssignment_1_1(), "rule__XCSSStyleRule__SelectorsAssignment_1_1");
			builder.put(grammarAccess.getXCSSStyleRuleAccess().getVariableDeclarationsAssignment_3(), "rule__XCSSStyleRule__VariableDeclarationsAssignment_3");
			builder.put(grammarAccess.getXCSSStyleRuleAccess().getCssStyleDeclarationsAssignment_4(), "rule__XCSSStyleRule__CssStyleDeclarationsAssignment_4");
			builder.put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_0(), "rule__VariableDeclaration__NameAssignment_0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getValueAssignment_2(), "rule__VariableDeclaration__ValueAssignment_2");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1(), "rule__Addition__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1(), "rule__Multiplication__OperatorAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
			builder.put(grammarAccess.getXCSSSelectorAccess().getNameAssignment_0(), "rule__XCSSSelector__NameAssignment_0");
			builder.put(grammarAccess.getXCSSSelectorAccess().getPseudoClassesAssignment_1(), "rule__XCSSSelector__PseudoClassesAssignment_1");
			builder.put(grammarAccess.getSelectorNameAccess().getDotAssignment_0_0(), "rule__SelectorName__DotAssignment_0_0");
			builder.put(grammarAccess.getSelectorNameAccess().getNameAssignment_0_1(), "rule__SelectorName__NameAssignment_0_1");
			builder.put(grammarAccess.getSelectorNameAccess().getAsteriskAssignment_1(), "rule__SelectorName__AsteriskAssignment_1");
			builder.put(grammarAccess.getPseudoClassAccess().getValueAssignment_1(), "rule__PseudoClass__ValueAssignment_1");
			builder.put(grammarAccess.getCSSStyleDelacrationAccess().getCssStyleKeyAssignment_0(), "rule__CSSStyleDelacration__CssStyleKeyAssignment_0");
			builder.put(grammarAccess.getCSSStyleDelacrationAccess().getCssStyleValueAssignment_2(), "rule__CSSStyleDelacration__CssStyleValueAssignment_2");
			builder.put(grammarAccess.getCSSStyleKeyAccess().getValueAssignment(), "rule__CSSStyleKey__ValueAssignment");
			builder.put(grammarAccess.getCSSStyleValueAccess().getValueAssignment_0(), "rule__CSSStyleValue__ValueAssignment_0");
			builder.put(grammarAccess.getCSSStyleValueAccess().getVariableAssignment_1(), "rule__CSSStyleValue__VariableAssignment_1");
			builder.put(grammarAccess.getCSSStyleValueLiteralAccess().getNumberAssignment_0(), "rule__CSSStyleValueLiteral__NumberAssignment_0");
			builder.put(grammarAccess.getCSSStyleValueLiteralAccess().getSizeAssignment_1(), "rule__CSSStyleValueLiteral__SizeAssignment_1");
			builder.put(grammarAccess.getCSSStyleValueLiteralAccess().getWordAssignment_2(), "rule__CSSStyleValueLiteral__WordAssignment_2");
			builder.put(grammarAccess.getCSSStyleValueLiteralAccess().getHexAssignment_3(), "rule__CSSStyleValueLiteral__HexAssignment_3");
			builder.put(grammarAccess.getCSSStyleValueLiteralAccess().getFunctionAssignment_4(), "rule__CSSStyleValueLiteral__FunctionAssignment_4");
			builder.put(grammarAccess.getCSSStyleValueLiteralAccess().getStringAssignment_5(), "rule__CSSStyleValueLiteral__StringAssignment_5");
			builder.put(grammarAccess.getSizeLiteralAccess().getValueAssignment_0(), "rule__SizeLiteral__ValueAssignment_0");
			builder.put(grammarAccess.getSizeLiteralAccess().getUnitAssignment_1(), "rule__SizeLiteral__UnitAssignment_1");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private XcssGrammarAccess grammarAccess;

	@Override
	protected InternalXcssParser createParser() {
		InternalXcssParser result = new InternalXcssParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new XcssTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public XcssGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XcssGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
