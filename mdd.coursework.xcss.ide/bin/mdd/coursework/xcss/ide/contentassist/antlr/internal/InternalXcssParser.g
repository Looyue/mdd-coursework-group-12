/*
 * generated by Xtext 2.24.0
 */
parser grammar InternalXcssParser;

options {
	tokenVocab=InternalXcssLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package mdd.coursework.xcss.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import mdd.coursework.xcss.services.XcssGrammarAccess;

}
@members {
	private XcssGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("DollarSign", "'\\u0024'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("EqualsSign", "'='");
	}

	public void setGrammarAccess(XcssGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleXcssModel
entryRuleXcssModel
:
{ before(grammarAccess.getXcssModelRule()); }
	 ruleXcssModel
{ after(grammarAccess.getXcssModelRule()); } 
	 EOF 
;

// Rule XcssModel
ruleXcssModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXcssModelAccess().getElementsAssignment()); }
		(rule__XcssModel__ElementsAssignment)*
		{ after(grammarAccess.getXcssModelAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement
:
{ before(grammarAccess.getAbstractElementRule()); }
	 ruleAbstractElement
{ after(grammarAccess.getAbstractElementRule()); } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractElementAccess().getAlternatives()); }
		(rule__AbstractElement__Alternatives)
		{ after(grammarAccess.getAbstractElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXCSSStyleRule
entryRuleXCSSStyleRule
:
{ before(grammarAccess.getXCSSStyleRuleRule()); }
	 ruleXCSSStyleRule
{ after(grammarAccess.getXCSSStyleRuleRule()); } 
	 EOF 
;

// Rule XCSSStyleRule
ruleXCSSStyleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXCSSStyleRuleAccess().getGroup()); }
		(rule__XCSSStyleRule__Group__0)
		{ after(grammarAccess.getXCSSStyleRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableId
entryRuleVariableId
:
{ before(grammarAccess.getVariableIdRule()); }
	 ruleVariableId
{ after(grammarAccess.getVariableIdRule()); } 
	 EOF 
;

// Rule VariableId
ruleVariableId 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableIdAccess().getGroup()); }
		(rule__VariableId__Group__0)
		{ after(grammarAccess.getVariableIdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXCSSSelector
entryRuleXCSSSelector
:
{ before(grammarAccess.getXCSSSelectorRule()); }
	 ruleXCSSSelector
{ after(grammarAccess.getXCSSSelectorRule()); } 
	 EOF 
;

// Rule XCSSSelector
ruleXCSSSelector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXCSSSelectorAccess().getGroup()); }
		(rule__XCSSSelector__Group__0)
		{ after(grammarAccess.getXCSSSelectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectorName
entryRuleSelectorName
:
{ before(grammarAccess.getSelectorNameRule()); }
	 ruleSelectorName
{ after(grammarAccess.getSelectorNameRule()); } 
	 EOF 
;

// Rule SelectorName
ruleSelectorName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectorNameAccess().getAlternatives()); }
		(rule__SelectorName__Alternatives)
		{ after(grammarAccess.getSelectorNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePseudoClass
entryRulePseudoClass
:
{ before(grammarAccess.getPseudoClassRule()); }
	 rulePseudoClass
{ after(grammarAccess.getPseudoClassRule()); } 
	 EOF 
;

// Rule PseudoClass
rulePseudoClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPseudoClassAccess().getGroup()); }
		(rule__PseudoClass__Group__0)
		{ after(grammarAccess.getPseudoClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCSSStyleDelacration
entryRuleCSSStyleDelacration
:
{ before(grammarAccess.getCSSStyleDelacrationRule()); }
	 ruleCSSStyleDelacration
{ after(grammarAccess.getCSSStyleDelacrationRule()); } 
	 EOF 
;

// Rule CSSStyleDelacration
ruleCSSStyleDelacration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCSSStyleDelacrationAccess().getGroup()); }
		(rule__CSSStyleDelacration__Group__0)
		{ after(grammarAccess.getCSSStyleDelacrationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCSSStyleKey
entryRuleCSSStyleKey
:
{ before(grammarAccess.getCSSStyleKeyRule()); }
	 ruleCSSStyleKey
{ after(grammarAccess.getCSSStyleKeyRule()); } 
	 EOF 
;

// Rule CSSStyleKey
ruleCSSStyleKey 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCSSStyleKeyAccess().getValueAssignment()); }
		(rule__CSSStyleKey__ValueAssignment)
		{ after(grammarAccess.getCSSStyleKeyAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCSSStyleValue
entryRuleCSSStyleValue
:
{ before(grammarAccess.getCSSStyleValueRule()); }
	 ruleCSSStyleValue
{ after(grammarAccess.getCSSStyleValueRule()); } 
	 EOF 
;

// Rule CSSStyleValue
ruleCSSStyleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCSSStyleValueAccess().getAlternatives()); }
		(rule__CSSStyleValue__Alternatives)
		{ after(grammarAccess.getCSSStyleValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCSSStyleValueLiteral
entryRuleCSSStyleValueLiteral
:
{ before(grammarAccess.getCSSStyleValueLiteralRule()); }
	 ruleCSSStyleValueLiteral
{ after(grammarAccess.getCSSStyleValueLiteralRule()); } 
	 EOF 
;

// Rule CSSStyleValueLiteral
ruleCSSStyleValueLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCSSStyleValueLiteralAccess().getAlternatives()); }
		(rule__CSSStyleValueLiteral__Alternatives)
		{ after(grammarAccess.getCSSStyleValueLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSizeLiteral
entryRuleSizeLiteral
:
{ before(grammarAccess.getSizeLiteralRule()); }
	 ruleSizeLiteral
{ after(grammarAccess.getSizeLiteralRule()); } 
	 EOF 
;

// Rule SizeLiteral
ruleSizeLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSizeLiteralAccess().getGroup()); }
		(rule__SizeLiteral__Group__0)
		{ after(grammarAccess.getSizeLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
		(rule__NumberLiteral__ValueAssignment)
		{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNUMBER
entryRuleNUMBER
:
{ before(grammarAccess.getNUMBERRule()); }
	 ruleNUMBER
{ after(grammarAccess.getNUMBERRule()); } 
	 EOF 
;

// Rule NUMBER
ruleNUMBER 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNUMBERAccess().getAlternatives()); }
		(rule__NUMBER__Alternatives)
		{ after(grammarAccess.getNUMBERAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFLOAT
entryRuleFLOAT
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getFLOATRule()); }
	 ruleFLOAT
{ after(grammarAccess.getFLOATRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FLOAT
ruleFLOAT 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFLOATAccess().getGroup()); }
		(rule__FLOAT__Group__0)
		{ after(grammarAccess.getFLOATAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

rule__AbstractElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractElementAccess().getVariableDeclarationParserRuleCall_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getAbstractElementAccess().getVariableDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractElementAccess().getXCSSStyleRuleParserRuleCall_1()); }
		ruleXCSSStyleRule
		{ after(grammarAccess.getAbstractElementAccess().getXCSSStyleRuleParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		PlusSign
		{ after(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		HyphenMinus
		{ after(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
		Asterisk
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
		Solidus
		{ after(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getCSSStyleValueParserRuleCall_0()); }
		ruleCSSStyleValue
		{ after(grammarAccess.getPrimaryAccess().getCSSStyleValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
		(rule__Primary__Group_1__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorNameAccess().getGroup_0()); }
		(rule__SelectorName__Group_0__0)
		{ after(grammarAccess.getSelectorNameAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSelectorNameAccess().getAsteriskAssignment_1()); }
		(rule__SelectorName__AsteriskAssignment_1)
		{ after(grammarAccess.getSelectorNameAccess().getAsteriskAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSSStyleValueAccess().getValueAssignment_0()); }
		(rule__CSSStyleValue__ValueAssignment_0)
		{ after(grammarAccess.getCSSStyleValueAccess().getValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getCSSStyleValueAccess().getVariableAssignment_1()); }
		(rule__CSSStyleValue__VariableAssignment_1)
		{ after(grammarAccess.getCSSStyleValueAccess().getVariableAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleValueLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSSStyleValueLiteralAccess().getNumberAssignment_0()); }
		(rule__CSSStyleValueLiteral__NumberAssignment_0)
		{ after(grammarAccess.getCSSStyleValueLiteralAccess().getNumberAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getCSSStyleValueLiteralAccess().getSizeAssignment_1()); }
		(rule__CSSStyleValueLiteral__SizeAssignment_1)
		{ after(grammarAccess.getCSSStyleValueLiteralAccess().getSizeAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getCSSStyleValueLiteralAccess().getWordAssignment_2()); }
		(rule__CSSStyleValueLiteral__WordAssignment_2)
		{ after(grammarAccess.getCSSStyleValueLiteralAccess().getWordAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getCSSStyleValueLiteralAccess().getHexAssignment_3()); }
		(rule__CSSStyleValueLiteral__HexAssignment_3)
		{ after(grammarAccess.getCSSStyleValueLiteralAccess().getHexAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getCSSStyleValueLiteralAccess().getFunctionAssignment_4()); }
		(rule__CSSStyleValueLiteral__FunctionAssignment_4)
		{ after(grammarAccess.getCSSStyleValueLiteralAccess().getFunctionAssignment_4()); }
	)
	|
	(
		{ before(grammarAccess.getCSSStyleValueLiteralAccess().getStringAssignment_5()); }
		(rule__CSSStyleValueLiteral__StringAssignment_5)
		{ after(grammarAccess.getCSSStyleValueLiteralAccess().getStringAssignment_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNUMBERAccess().getFLOATParserRuleCall_1()); }
		ruleFLOAT
		{ after(grammarAccess.getNUMBERAccess().getFLOATParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XCSSStyleRule__Group__0__Impl
	rule__XCSSStyleRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXCSSStyleRuleAccess().getSelectorsAssignment_0()); }
	(rule__XCSSStyleRule__SelectorsAssignment_0)
	{ after(grammarAccess.getXCSSStyleRuleAccess().getSelectorsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XCSSStyleRule__Group__1__Impl
	rule__XCSSStyleRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXCSSStyleRuleAccess().getGroup_1()); }
	(rule__XCSSStyleRule__Group_1__0)*
	{ after(grammarAccess.getXCSSStyleRuleAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XCSSStyleRule__Group__2__Impl
	rule__XCSSStyleRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXCSSStyleRuleAccess().getBEGINTerminalRuleCall_2()); }
	RULE_BEGIN
	{ after(grammarAccess.getXCSSStyleRuleAccess().getBEGINTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XCSSStyleRule__Group__3__Impl
	rule__XCSSStyleRule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXCSSStyleRuleAccess().getVariableDeclarationsAssignment_3()); }
	(rule__XCSSStyleRule__VariableDeclarationsAssignment_3)*
	{ after(grammarAccess.getXCSSStyleRuleAccess().getVariableDeclarationsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XCSSStyleRule__Group__4__Impl
	rule__XCSSStyleRule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXCSSStyleRuleAccess().getCssStyleDeclarationsAssignment_4()); }
	(rule__XCSSStyleRule__CssStyleDeclarationsAssignment_4)*
	{ after(grammarAccess.getXCSSStyleRuleAccess().getCssStyleDeclarationsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XCSSStyleRule__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXCSSStyleRuleAccess().getENDTerminalRuleCall_5()); }
	RULE_END
	{ after(grammarAccess.getXCSSStyleRuleAccess().getENDTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XCSSStyleRule__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XCSSStyleRule__Group_1__0__Impl
	rule__XCSSStyleRule__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXCSSStyleRuleAccess().getCommaKeyword_1_0()); }
	Comma
	{ after(grammarAccess.getXCSSStyleRuleAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XCSSStyleRule__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXCSSStyleRuleAccess().getSelectorsAssignment_1_1()); }
	(rule__XCSSStyleRule__SelectorsAssignment_1_1)
	{ after(grammarAccess.getXCSSStyleRuleAccess().getSelectorsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_0()); }
	(rule__VariableDeclaration__NameAssignment_0)
	{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_1()); }
	EqualsSign
	{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getValueAssignment_2()); }
	(rule__VariableDeclaration__ValueAssignment_2)
	{ after(grammarAccess.getVariableDeclarationAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableId__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableId__Group__0__Impl
	rule__VariableId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableId__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIdAccess().getDollarSignKeyword_0()); }
	DollarSign
	{ after(grammarAccess.getVariableIdAccess().getDollarSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableId__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableId__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableId__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIdAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getVariableIdAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
	(rule__Addition__OperatorAssignment_1_1)
	{ after(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
	(rule__Addition__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
	(rule__Multiplication__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
	(rule__Multiplication__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
	LeftParenthesis
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_1_1()); }
	ruleAddition
	{ after(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
	RightParenthesis
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XCSSSelector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XCSSSelector__Group__0__Impl
	rule__XCSSSelector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSSelector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXCSSSelectorAccess().getNameAssignment_0()); }
	(rule__XCSSSelector__NameAssignment_0)
	{ after(grammarAccess.getXCSSSelectorAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSSelector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XCSSSelector__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSSelector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXCSSSelectorAccess().getPseudoClassesAssignment_1()); }
	(rule__XCSSSelector__PseudoClassesAssignment_1)*
	{ after(grammarAccess.getXCSSSelectorAccess().getPseudoClassesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorName__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectorName__Group_0__0__Impl
	rule__SelectorName__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorName__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorNameAccess().getDotAssignment_0_0()); }
	(rule__SelectorName__DotAssignment_0_0)?
	{ after(grammarAccess.getSelectorNameAccess().getDotAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorName__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectorName__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorName__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorNameAccess().getNameAssignment_0_1()); }
	(rule__SelectorName__NameAssignment_0_1)
	{ after(grammarAccess.getSelectorNameAccess().getNameAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PseudoClass__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PseudoClass__Group__0__Impl
	rule__PseudoClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPseudoClassAccess().getColonKeyword_0()); }
	Colon
	{ after(grammarAccess.getPseudoClassAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PseudoClass__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPseudoClassAccess().getValueAssignment_1()); }
	(rule__PseudoClass__ValueAssignment_1)
	{ after(grammarAccess.getPseudoClassAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CSSStyleDelacration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CSSStyleDelacration__Group__0__Impl
	rule__CSSStyleDelacration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleDelacration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCSSStyleDelacrationAccess().getCssStyleKeyAssignment_0()); }
	(rule__CSSStyleDelacration__CssStyleKeyAssignment_0)
	{ after(grammarAccess.getCSSStyleDelacrationAccess().getCssStyleKeyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleDelacration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CSSStyleDelacration__Group__1__Impl
	rule__CSSStyleDelacration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleDelacration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCSSStyleDelacrationAccess().getColonKeyword_1()); }
	Colon
	{ after(grammarAccess.getCSSStyleDelacrationAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleDelacration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CSSStyleDelacration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleDelacration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCSSStyleDelacrationAccess().getCssStyleValueAssignment_2()); }
	(rule__CSSStyleDelacration__CssStyleValueAssignment_2)
	{ after(grammarAccess.getCSSStyleDelacrationAccess().getCssStyleValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SizeLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SizeLiteral__Group__0__Impl
	rule__SizeLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SizeLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeLiteralAccess().getValueAssignment_0()); }
	(rule__SizeLiteral__ValueAssignment_0)
	{ after(grammarAccess.getSizeLiteralAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SizeLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SizeLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SizeLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeLiteralAccess().getUnitAssignment_1()); }
	(rule__SizeLiteral__UnitAssignment_1)
	{ after(grammarAccess.getSizeLiteralAccess().getUnitAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FLOAT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__0__Impl
	rule__FLOAT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getHyphenMinusKeyword_0()); }
	(HyphenMinus)?
	{ after(grammarAccess.getFLOATAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__1__Impl
	rule__FLOAT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_1()); }
	(RULE_INT)*
	{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__2__Impl
	rule__FLOAT__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getFullStopKeyword_2()); }
	FullStop
	{ after(grammarAccess.getFLOATAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_3()); }
		(RULE_INT)
		{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_3()); }
	)
	(
		{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_3()); }
		(RULE_INT)*
		{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XcssModel__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXcssModelAccess().getElementsAbstractElementParserRuleCall_0()); }
		ruleAbstractElement
		{ after(grammarAccess.getXcssModelAccess().getElementsAbstractElementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__SelectorsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXCSSStyleRuleAccess().getSelectorsXCSSSelectorParserRuleCall_0_0()); }
		ruleXCSSSelector
		{ after(grammarAccess.getXCSSStyleRuleAccess().getSelectorsXCSSSelectorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__SelectorsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXCSSStyleRuleAccess().getSelectorsXCSSSelectorParserRuleCall_1_1_0()); }
		ruleXCSSSelector
		{ after(grammarAccess.getXCSSStyleRuleAccess().getSelectorsXCSSSelectorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__VariableDeclarationsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXCSSStyleRuleAccess().getVariableDeclarationsVariableDeclarationParserRuleCall_3_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getXCSSStyleRuleAccess().getVariableDeclarationsVariableDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSStyleRule__CssStyleDeclarationsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXCSSStyleRuleAccess().getCssStyleDeclarationsCSSStyleDelacrationParserRuleCall_4_0()); }
		ruleCSSStyleDelacration
		{ after(grammarAccess.getXCSSStyleRuleAccess().getCssStyleDeclarationsCSSStyleDelacrationParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameVariableIdParserRuleCall_0_0()); }
		ruleVariableId
		{ after(grammarAccess.getVariableDeclarationAccess().getNameVariableIdParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getValueAdditionParserRuleCall_2_0()); }
		ruleAddition
		{ after(grammarAccess.getVariableDeclarationAccess().getValueAdditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Addition__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Multiplication__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSSelector__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXCSSSelectorAccess().getNameSelectorNameParserRuleCall_0_0()); }
		ruleSelectorName
		{ after(grammarAccess.getXCSSSelectorAccess().getNameSelectorNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XCSSSelector__PseudoClassesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXCSSSelectorAccess().getPseudoClassesPseudoClassParserRuleCall_1_0()); }
		rulePseudoClass
		{ after(grammarAccess.getXCSSSelectorAccess().getPseudoClassesPseudoClassParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorName__DotAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorNameAccess().getDotFullStopKeyword_0_0_0()); }
		(
			{ before(grammarAccess.getSelectorNameAccess().getDotFullStopKeyword_0_0_0()); }
			FullStop
			{ after(grammarAccess.getSelectorNameAccess().getDotFullStopKeyword_0_0_0()); }
		)
		{ after(grammarAccess.getSelectorNameAccess().getDotFullStopKeyword_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorName__NameAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorNameAccess().getNameIDTerminalRuleCall_0_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSelectorNameAccess().getNameIDTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorName__AsteriskAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorNameAccess().getAsteriskAsteriskKeyword_1_0()); }
		(
			{ before(grammarAccess.getSelectorNameAccess().getAsteriskAsteriskKeyword_1_0()); }
			Asterisk
			{ after(grammarAccess.getSelectorNameAccess().getAsteriskAsteriskKeyword_1_0()); }
		)
		{ after(grammarAccess.getSelectorNameAccess().getAsteriskAsteriskKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPseudoClassAccess().getValueIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPseudoClassAccess().getValueIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleDelacration__CssStyleKeyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSSStyleDelacrationAccess().getCssStyleKeyCSSStyleKeyParserRuleCall_0_0()); }
		ruleCSSStyleKey
		{ after(grammarAccess.getCSSStyleDelacrationAccess().getCssStyleKeyCSSStyleKeyParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleDelacration__CssStyleValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSSStyleDelacrationAccess().getCssStyleValueCSSStyleValueParserRuleCall_2_0()); }
		ruleCSSStyleValue
		{ after(grammarAccess.getCSSStyleDelacrationAccess().getCssStyleValueCSSStyleValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleKey__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSSStyleKeyAccess().getValueIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getCSSStyleKeyAccess().getValueIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleValue__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSSStyleValueAccess().getValueCSSStyleValueLiteralParserRuleCall_0_0()); }
		ruleCSSStyleValueLiteral
		{ after(grammarAccess.getCSSStyleValueAccess().getValueCSSStyleValueLiteralParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleValue__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSSStyleValueAccess().getVariableVariableDeclarationCrossReference_1_0()); }
		(
			{ before(grammarAccess.getCSSStyleValueAccess().getVariableVariableDeclarationVariableIdParserRuleCall_1_0_1()); }
			ruleVariableId
			{ after(grammarAccess.getCSSStyleValueAccess().getVariableVariableDeclarationVariableIdParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getCSSStyleValueAccess().getVariableVariableDeclarationCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleValueLiteral__NumberAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSSStyleValueLiteralAccess().getNumberNumberLiteralParserRuleCall_0_0()); }
		ruleNumberLiteral
		{ after(grammarAccess.getCSSStyleValueLiteralAccess().getNumberNumberLiteralParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleValueLiteral__SizeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSSStyleValueLiteralAccess().getSizeSizeLiteralParserRuleCall_1_0()); }
		ruleSizeLiteral
		{ after(grammarAccess.getCSSStyleValueLiteralAccess().getSizeSizeLiteralParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleValueLiteral__WordAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSSStyleValueLiteralAccess().getWordIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getCSSStyleValueLiteralAccess().getWordIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleValueLiteral__HexAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSSStyleValueLiteralAccess().getHexHEXTerminalRuleCall_3_0()); }
		RULE_HEX
		{ after(grammarAccess.getCSSStyleValueLiteralAccess().getHexHEXTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleValueLiteral__FunctionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSSStyleValueLiteralAccess().getFunctionFUNCTION_EXPRESSIONTerminalRuleCall_4_0()); }
		RULE_FUNCTION_EXPRESSION
		{ after(grammarAccess.getCSSStyleValueLiteralAccess().getFunctionFUNCTION_EXPRESSIONTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSSStyleValueLiteral__StringAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSSStyleValueLiteralAccess().getStringSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getCSSStyleValueLiteralAccess().getStringSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SizeLiteral__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSizeLiteralAccess().getValueNUMBERParserRuleCall_0_0()); }
		ruleNUMBER
		{ after(grammarAccess.getSizeLiteralAccess().getValueNUMBERParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SizeLiteral__UnitAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSizeLiteralAccess().getUnitIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSizeLiteralAccess().getUnitIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueNUMBERParserRuleCall_0()); }
		ruleNUMBER
		{ after(grammarAccess.getNumberLiteralAccess().getValueNUMBERParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
